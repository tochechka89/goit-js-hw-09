'use strict';

const vite = require('vite');
const path = require('path');
const fs = require('fs');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const path__default = /*#__PURE__*/_interopDefaultCompat(path);
const fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

const attrNameExpr = "[a-z0-9_-]+";
const attrDataExpr = '[^"]*';
const attrMatcher = new RegExp(`(${attrNameExpr}|)="(${attrDataExpr})"`, "gsi");
const replaceAttrMatcher = new RegExp(`{=\\$${attrNameExpr}}`, "gsi");
function escapeRegExp(input) {
  return input.replace(/[.*+?^${}()|[\]\\]/g, "$&");
}
function injectHTML(pluginConfig) {
  const {
    tagName = "load",
    sourceAttr = "src",
    ...cfg
  } = { ...pluginConfig };
  let config;
  const tagMatcher = new RegExp(
    `<${tagName}((?:\\s{1,}(${attrNameExpr}|)="${attrDataExpr}")+)\\s*/>`,
    "gsi"
  );
  const fileList = /* @__PURE__ */ new Set();
  async function renderSnippets(code, codePath) {
    if (!config) {
      return code;
    }
    const matches = code.matchAll(tagMatcher);
    for (const match of matches) {
      let [tag, _attrs] = match;
      const attrs = /* @__PURE__ */ new Map();
      for (const [, name, value] of _attrs.trim().matchAll(attrMatcher)) {
        attrs.set(name || sourceAttr, value);
      }
      let url = attrs.get(sourceAttr);
      if (typeof url !== "string") {
        throw new Error(
          `injectHTML: Source attribute '${sourceAttr}' missing in\r
${tag}`
        );
      }
      let root = config.root;
      if (url.startsWith(".")) {
        root = path__default.dirname(root + codePath);
      } else {
        url = "/" + url;
      }
      if (!(url.endsWith(".htm") || url.endsWith(".html"))) {
        ["html", "htm"].some((item) => {
          const fileName = "/index." + item;
          const filePath2 = vite.normalizePath(
            path__default.join(root, url, fileName)
          );
          if (fs__default.existsSync(filePath2)) {
            url += fileName;
            return true;
          }
        });
      }
      const filePath = vite.normalizePath(path__default.join(root, url));
      if (pluginConfig?.debug?.logPath) {
        console.log("Trying to include ", filePath);
      }
      fileList.add(filePath);
      let out = tag;
      try {
        let data = fs__default.readFileSync(filePath, "utf8");
        for (const [name, value] of attrs) {
          const attrRegExp = new RegExp(
            "{=\\$" + escapeRegExp(name) + "}",
            "gs"
          );
          data = data.replace(attrRegExp, value);
        }
        if (cfg.replace?.undefined) {
          data = data.replace(
            replaceAttrMatcher,
            cfg.replace.undefined
          );
        }
        out = await renderSnippets(data, url);
      } catch (error) {
        if (error instanceof Error) {
          throw new Error("injectHTML: " + error.message);
        }
        throw new Error(`${error}`);
      }
      code = code.replace(tag, out);
    }
    return code;
  }
  return {
    name: "vite-plugin-html-inject",
    configResolved(resolvedConfig) {
      config = resolvedConfig;
    },
    handleHotUpdate({ file, server }) {
      if (fileList.has(file)) {
        server.ws.send({
          type: "full-reload",
          path: "*"
        });
      }
    },
    transformIndexHtml: {
      enforce: "pre",
      transform(html, ctx) {
        return renderSnippets(html, ctx.path);
      },
      // ^ Keeping for Vite below version 4.0.0
      order: "pre",
      handler(html, ctx) {
        return renderSnippets(html, ctx.path);
      }
    }
  };
}

module.exports = injectHTML;
